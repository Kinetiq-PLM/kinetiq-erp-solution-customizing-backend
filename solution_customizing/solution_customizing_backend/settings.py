"""
Django settings for solution_customizing_backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0un3katl4(j##n_b=qpmeg%_8q50f6gg7yypfe__k*u8fiq64z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'solution_customizing_chatbot',
    'rest_framework',
    'corsheaders',    
    'django_cognito_jwt'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    "corsheaders.middleware.CorsMiddleware"
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

REST_FRAMEWORK = {
    'DEFAULT-PERMISSION-CLASSES': (
        'rest_framework.permission.AllowAny'
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "django_cognito_jwt.JSONWebTokenAuthentication",
    ),
}

ROOT_URLCONF = 'solution_customizing_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'solution_customizing_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'Kinetiq-DB-Schema',
        'USER': 'postgres',
        'PASSWORD': 'admin',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AI_CONFIG = {
    "model": "gemini-2.0-flash",
    "api_key": "AIzaSyBV9MSvQI-nBmfKlTl693KsLLSQVuNKKsM"
}

DATABASE_SCHEMA = """ 
-- ==========================================
--          PROJECT MANAGEMENT
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 project_management.external_project_request (
    ext_project_request_id VARCHAR(255) PRIMARY KEY,  
    ext_project_name VARCHAR(50) NOT NULL,
    ext_project_description TEXT,
    approval_id VARCHAR(255),
    item_id VARCHAR(255)
);
 
 project_management.external_project_details (
    project_id VARCHAR(255) PRIMARY KEY,
    ext_project_request_id VARCHAR(255),
    project_status project_status NOT NULL
);
 
 project_management.external_project_labor (
    project_labor_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    employee_id VARCHAR(255)
);
 
 project_management.external_project_task_list (
    task_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    task_description TEXT,
    task_status task_status NOT NULL,
    task_deadline DATE NOT NULL,
    project_labor_id VARCHAR(255)
);	
 
 project_management.external_project_warranty (
    project_warranty_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    warranty_coverage_yr INT NOT NULL,
    warranty_start_date DATE NOT NULL,
    warranty_end_date DATE NOT NULL,
    CHECK(warranty_end_date > warranty_start_date)
);
 
 project_management.external_project_tracking (
    project_tracking_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    project_milestone project_milestone NOT NULL,
    start_date DATE NOT NULL,
    estimated_end_date DATE NOT NULL,
    project_warranty_id VARCHAR(255),
    project_issue TEXT DEFAULT NULL
);
 
 project_management.external_project_cost_management (
    project_resources_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    cost_id VARCHAR(255),
    project_budget_approval project_budget_approval NOT NULL
);
 
 project_management.internal_project_request (
    project_request_id VARCHAR(255) PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    project_description TEXT,
    request_date DATE NOT NULL,
    request_valid_date DATE NOT NULL,
    request_starting_date DATE NOT NULL,
    approval_id VARCHAR(255),
    employee_id VARCHAR(255),
    dept_id VARCHAR(255),
    project_type project_type NOT NULL
);
 
 project_management.internal_project_details (
    intrnl_project_id VARCHAR(255) PRIMARY KEY,
    project_request_id VARCHAR(255),
    intrnl_project_status intrnl_project_status NOT NULL
);
 
 project_management.internal_project_tracking (
    intrnl_project_tracking_id VARCHAR(255) PRIMARY KEY,
    intrnl_project_id VARCHAR(255),
    intrnl_start_date DATE NOT NULL,
    intrnl_estimated_end_date DATE NOT NULL,
    intrnl_project_issue TEXT DEFAULT NULL
);
 
 project_management.internal_project_labor (
    intrnl_project_labor_id VARCHAR(255) PRIMARY KEY,
    intrnl_project_id VARCHAR(255),
    employee_id VARCHAR(255)	
);
 
 project_management.internal_project_task_list (
    intrnl_task_id VARCHAR(255) PRIMARY KEY,
    intrnl_project_id VARCHAR(255),
    intrnl_task_description TEXT,
    intrnl_task_status intrnl_task_status NOT NULL,
    intrnl_task_deadline DATE NOT NULL,
    intrnl_project_labor_id VARCHAR(255)
);
 
 project_management.contractual_worker_request (
    request_id VARCHAR(255) PRIMARY KEY,
    intrnl_project_id VARCHAR(255),
    job_title VARCHAR(50) NOT NULL,
    job_description TEXT,
    required_position VARCHAR(50) NOT NULL,
    employment_type employment_type NOT NULL,
    dept_id VARCHAR(255)
);

-- ==========================================
--            	       MRP
-- ==========================================

-- ==========================================
--               TABLE DEFINITIONS
-- ==========================================

 mrp.bill_of_materials (
    bom_id VARCHAR(255) PRIMARY KEY,  
    product_id VARCHAR(255),
    material_id VARCHAR(255),
    product_description TEXT NOT NULL,
    unit_of_measure VARCHAR(255) NOT NULL,
    specific_notes TEXT NULL,
    quantity_of_unit INT NOT NULL,
    cost_per_raw_material DECIMAL(10, 2) NOT NULL,
    total_cost_of_raw_materials DECIMAL(10, 2) NOT NULL
);

 mrp.non_project_order_pricing (
    non_project_costing_id VARCHAR(255) PRIMARY KEY, 
    order_id VARCHAR(255),  
    product_id VARCHAR(255), 
    quantity INT NOT NULL,
    mrp_base_price DECIMAL(10, 2) NOT NULL,
    final_price DECIMAL(10, 2) NOT NULL
);

 mrp.overall_production (
    cost_id VARCHAR(255) PRIMARY KEY,
    production_order_detail_id VARCHAR(255),
    product_id VARCHAR(255),
    bom_id VARCHAR(255),  
    cost_of_raw_materials DECIMAL(10, 2) NOT NULL,
    labor_cost DECIMAL(10, 2) NOT NULL,
    total_mrp_cost DECIMAL(10, 2) NOT NULL
);

 mrp.principal_items (
    principal_item_id VARCHAR(255) PRIMARY KEY,
    service_request_id VARCHAR(255),
    service_order_id VARCHAR(255),
    quantity INT NOT NULL,
    item_id VARCHAR(255),
    unit_price DECIMAL(10, 2) NOT NULL,
    markup_price DECIMAL(10, 2) NOT NULL,
    pricing_date DATE NOT NULL
);


-- ==========================================
--            	  PRODUCTION
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 production.components (
    component_id VARCHAR(255) PRIMARY KEY,
    component_name VARCHAR(255) NOT NULL,
    component_description TEXT,
    unit_of_measure unit_of_measure DEFAULT 'kg',
    reorder_point INT NOT NULL,
    current_stock INT NOT NULL
);

 production.equipment (
    equipment_id VARCHAR(255) PRIMARY KEY,
    equipment_name VARCHAR(255) NOT NULL,
    description TEXT,
    availability_status availability_status DEFAULT 'Available',
    last_maintenance_date DATE DEFAULT NOW()
);

 production.production_orders_header (
    production_order_id VARCHAR(255) PRIMARY KEY,
    project_id VARCHAR(255),
    bom_id VARCHAR(255),
    start_date TIMESTAMP DEFAULT NOW(),
    end_date TIMESTAMP DEFAULT NOW(),
    status prod_status DEFAULT 'Pending',
    target_quantity INT NOT NULL,
    notes TEXT
);

 production.labor (
    labor_id VARCHAR(255) PRIMARY KEY,
    production_order_id VARCHAR(255),
    employee_id VARCHAR(255),
    date_worked TIMESTAMP DEFAULT NOW(),
    hours_worked INT NOT NULL
);

 production.delivery_requests (
    delivery_request_id VARCHAR(255) PRIMARY KEY,
    production_order_id VARCHAR(255),
    request_type request_type NOT NULL,
    request_date TIMESTAMP DEFAULT NOW(),
    requested_delivery_date DATE DEFAULT NOW(),
    component_id VARCHAR(255), 
    quantity_requested INT NOT NULL
);

 production.production_orders_details (
    production_order_detail_id VARCHAR(255) PRIMARY KEY,
    production_order_id VARCHAR(255),
    actual_quantity INT NOT NULL,
    cost_of_production DECIMAL(10, 2) NOT NULL,
    miscellaneous_costs DECIMAL(10, 2) NOT NULL,
    equipment_id VARCHAR(255),
    rework_required BOOLEAN NOT NULL,
    rework_notes TEXT,
    content_id VARCHAR(255)
);

-- ==========================================
--                   HR
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 human_resources.departments (
    dept_id VARCHAR(255) PRIMARY KEY,
    dept_name VARCHAR(100) UNIQUE NOT NULL
);

 human_resources.employees (
    employee_id VARCHAR(255) PRIMARY KEY,
    dept_id VARCHAR(255),
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    job_title VARCHAR(100),
    employment_type VARCHAR(20) CHECK (employment_type IN ('Permanent', 'Contractual')) NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Active', 'Inactive', 'Terminated')) NOT NULL DEFAULT 'Active',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.attendance_tracking (
    attendance_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    time_in TIMESTAMP NOT NULL,
    time_out TIMESTAMP NOT NULL,
    work_hours DECIMAL(5,2) GENERATED ALWAYS AS (EXTRACT(EPOCH FROM (time_out - time_in)) / 3600) STORED,
    status VARCHAR(20) CHECK (status IN ('Present', 'Late', 'Absent', 'Half-Day', 'On Leave')) NOT NULL DEFAULT 'Present',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.leave_requests (
    leave_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    dept_id VARCHAR(255),
    immediate_superior_id VARCHAR(255),
    management_approval_id VARCHAR(255),
    leave_type VARCHAR(20) CHECK (leave_type IN ('Sick', 'Vacation', 'Personal', 'Maternity', 'Paternity', 'Unpaid')) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    total_days INT GENERATED ALWAYS AS (end_date - start_date + 1) STORED,
    is_paid BOOLEAN DEFAULT TRUE,
    status VARCHAR(50) CHECK (status IN ('Pending', 'Approved by Superior', 'Rejected by Superior', 'Approved by Management', 'Rejected by Management', 'Recorded in HRIS')) DEFAULT 'Pending',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.workforce_allocation (
    allocation_id VARCHAR(255) PRIMARY KEY,
    requesting_dept_id VARCHAR(255),
    employee_id VARCHAR(255),
    current_dept_id VARCHAR(255),
    reason TEXT NOT NULL,
    approval_status VARCHAR(20) CHECK (approval_status IN ('Pending', 'Approved', 'Rejected')) DEFAULT 'Pending',
    status VARCHAR(20) CHECK (status IN ('Active', 'Completed', 'Canceled')) DEFAULT 'Active',
    start_date DATE NOT NULL,
    end_date DATE,
    approval_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.job_posting (
    job_id VARCHAR(255) PRIMARY KEY,
    request_id VARCHAR(255),
    dept_id VARCHAR(255),
    position VARCHAR(100) NOT NULL,
    description TEXT NOT NULL,
    requirements TEXT NOT NULL,
    employment_type VARCHAR(20) CHECK (employment_type IN ('Permanent', 'Contractual')) NOT NULL,
    contract_duration SMALLINT CHECK (contract_duration >= 1),
    contract_rate DECIMAL(10,2),
    contract_pay_type VARCHAR(20) CHECK (contract_pay_type IN ('Hourly', 'Daily', 'Fixed')),
    status VARCHAR(20) CHECK (status IN ('Open', 'Closed')) DEFAULT 'Open',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP

);

 human_resources.candidates (
    candidate_id VARCHAR(255) PRIMARY KEY,
    job_id VARCHAR(255),
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(20),
    resume TEXT,
    employment_type VARCHAR(20) CHECK (employment_type IN ('Permanent', 'Contractual')) NOT NULL,
    contract_duration SMALLINT,
    status VARCHAR(20) CHECK (status IN ('Applied', 'Interview Scheduled', 'Hired', 'Rejected')) DEFAULT 'Applied',
    date_applied TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.interviews (
    interview_id VARCHAR(255) PRIMARY KEY,
    candidate_id VARCHAR(255),
    interviewer_id VARCHAR(255),
    interview_date TIMESTAMP NOT NULL,
    status VARCHAR(20) CHECK (status IN ('Scheduled', 'Completed', 'Canceled')) DEFAULT 'Scheduled',
    feedback TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 human_resources.employee_salary (
    salary_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    base_salary DECIMAL(10,2),
    contract_pay_type VARCHAR(20) CHECK (contract_pay_type IN ('Hourly', 'Daily')),
    contract_pay_rate DECIMAL(10,2),
    total_hours_worked DECIMAL(10,2),
    total_contract_pay DECIMAL(10,2),
    effective_date DATE DEFAULT CURRENT_DATE
);

 human_resources.employee_performance (
    performance_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    immediate_superior_id VARCHAR(255),
    rating INT CHECK (rating BETWEEN 1 AND 5) NOT NULL,
    bonus_percentage DECIMAL(5,2),
    review_date DATE DEFAULT CURRENT_DATE,
    comments TEXT
);

 human_resources.payroll (
    payroll_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    employment_type VARCHAR(20) CHECK (employment_type IN ('Permanent', 'Contractual')) NOT NULL DEFAULT 'Permanent',
    base_salary DECIMAL(10,2),
    work_days INT,
    contract_pay_type VARCHAR(20) CHECK (contract_pay_type IN ('Hourly', 'Daily', 'Fixed')),
    contract_pay_rate DECIMAL(10,2),
    total_hours_worked DECIMAL(10,2),  
    total_contract_pay DECIMAL(10,2) DEFAULT 0,  
    overtime_hours DECIMAL(5,2) DEFAULT 0,  
    overtime_pay DECIMAL(10,2) DEFAULT 0,  
    undertime_hours DECIMAL(5,2) DEFAULT 0,  
    undertime_deductions DECIMAL(10,2) DEFAULT 0, 
    unpaid_leave_days INT DEFAULT 0,  
    leave_deductions DECIMAL(10,2) DEFAULT 0,  
    taxable_income DECIMAL(10,2) DEFAULT 0,  
    tax DECIMAL(10,2) DEFAULT 0,  
    sss_deduction DECIMAL(10,2) DEFAULT 0,  
    philhealth_deduction DECIMAL(10,2) DEFAULT 0,  
    pagibig_deduction DECIMAL(10,2) DEFAULT 0,  
    thirteenth_month_pay DECIMAL(10,2) DEFAULT 0,  
    performance_bonus DECIMAL(10,2) DEFAULT 0,  
    net_salary DECIMAL(10,2) DEFAULT 0,  
    payment_date DATE DEFAULT CURRENT_DATE,
    payment_status VARCHAR(20) CHECK (payment_status IN ('Pending', 'Processed', 'Paid')) DEFAULT 'Pending'
);


-- ==========================================
--                  SALES
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 sales.customers (
    customer_id  VARCHAR(255) PRIMARY KEY,
    gl_account_id  VARCHAR(255),
    partner_id  VARCHAR(255),
    name VARCHAR(255) NULL,
    email_address VARCHAR(255) UNIQUE,
    phone_number VARCHAR(20),
    address_line1 VARCHAR(255),
    address_line2 VARCHAR(255),
    city VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100),
    customer_type customer_type_enum,
    status status_enum,
    debt DECIMAL(10,2) DEFAULT 0.00 CHECK (debt >= 0)
);

 sales.sales_costing (
    sales_costing_id  VARCHAR(255) PRIMARY KEY,
    non_project_costing_id  VARCHAR(255),
    project_resources_id  VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 sales.statement(
    statement_id  VARCHAR(255) PRIMARY KEY,
    customer_id  VARCHAR(255),
    salesrep_id  VARCHAR(255),
    total_amount DECIMAL (10,2),
    discount DECIMAL (10,2) CHECK (discount >= 0) DEFAULT 0, 
    type quotation_type_enum,
    total_tax INT DEFAULT 0
);

 sales.statement_item(
    statement_item_id  VARCHAR(255) PRIMARY KEY,
    statement_id  VARCHAR(255),
    sales_costing_id  VARCHAR(255),
    product_id  VARCHAR(255),
    item_md_id  VARCHAR(255),
    quantity INT,
    unit_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    markup_percentage DECIMAL(5,2) DEFAULT 0 CHECK (markup_percentage >= 0),
    demand_level demand_level_enum,
    discount DECIMAL (10,2) CHECK(discount >= 0),
    tax_amount INT DEFAULT 0
);

 sales.blanket_agreement(
    agreement_id  VARCHAR(255) PRIMARY KEY,
    statement_id  VARCHAR(255),
    start_date TIMESTAMP,
    end_date TIMESTAMP,
    status agreement_status_enum,
    description TEXT NULL,
    signed_date TIMESTAMP NULL,
    agreement_method agreement_method_enum
);

 sales.quotation (
    quotation_id  VARCHAR(255) PRIMARY KEY,
    statement_id  VARCHAR(255),
    agreement_id  VARCHAR(255),
    date_issued TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status quotation_status_enum
);

 sales.orders (
    order_id  VARCHAR(255) PRIMARY KEY,
    statement_id  VARCHAR(255),
    quotation_id  VARCHAR(255),
    rework_id  VARCHAR(255),
    goods_issue_id  VARCHAR(255),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    order_status order_status_enum,
    order_total_amount DECIMAL(10,2),
    order_type order_type_enum
);

 sales.payments (
    payment_id  VARCHAR(255) PRIMARY KEY,
    order_id  VARCHAR(255),
    payment_method payment_method_enum,
    payment_status payment_status_enum DEFAULT 'Pending',
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 sales.sales_invoices (
    invoice_id  VARCHAR(255) PRIMARY KEY,
    order_id  VARCHAR(255),
    invoice_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10,2),
    invoice_status invoice_status_enum,
    payment_status payment_status_enum,
    due_date DATE
);

 sales.shipping_details (
    shipping_id  VARCHAR(255) PRIMARY KEY,
    order_id  VARCHAR(255),
    operational_cost_id  VARCHAR(255),
    shipment_id  VARCHAR(255),	
    shipping_method shipping_method_enum,
    tracking_num VARCHAR(50) UNIQUE,
    shipping_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estimated_delivery TIMESTAMP,
    delivery_status delivery_status_enum
);

 sales.receipt (
    receipt_id  VARCHAR(255) PRIMARY KEY,
    shipping_id  VARCHAR(255),
    customer_id  VARCHAR(255),
    payments_id  VARCHAR(255),
    policy_id  VARCHAR(255),
    date_signed DATE,
    signed_docu VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 sales.ticket (
    ticket_id  VARCHAR(255) PRIMARY KEY,
    customer_id  VARCHAR(255),
    salesrep_id  VARCHAR(255),
    subject VARCHAR(255),
    description TEXT NULL,
    status ticket_status_enum,
    priority ticket_priority_enum,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 sales.ticket_convo (
    convo_id  VARCHAR(255) PRIMARY KEY,
    ticket_id  VARCHAR(255),
    content VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 sales.leads (
    lead_id  VARCHAR(255) PRIMARY KEY,
    salesrep_id  VARCHAR(255),
    lead_name VARCHAR(255),
    lead_email VARCHAR(255) UNIQUE,
    lead_phonenum VARCHAR(20),
    source lead_source_enum DEFAULT 'Website',
    status lead_status_enum DEFAULT 'New'
);

 sales.campaigns (
    campaign_id  VARCHAR(255) PRIMARY KEY,
    campaign_name VARCHAR(255),
    type campaign_type_enum DEFAULT 'Email',
    start_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP,
    status campaign_status_enum
);

 sales.campaign_contacts (
    contact_id  VARCHAR(255) PRIMARY KEY,
    lead_id  VARCHAR(255),
    campaign_id  VARCHAR(255),
    response_status response_status_enum
);

 sales.opportunities (
    opportunity_id  VARCHAR(255) PRIMARY KEY,
    customer_id  VARCHAR(255),
    partner_id  VARCHAR(255),
    salesrep_id  VARCHAR(255),
    estimated_value DECIMAL(10,2),
    expected_closed_date DATE,
    stage opportunity_stage_enum,
    status opportunity_status_enum,
    description TEXT NULL,
    reason_lost TEXT NULL
 );

 sales.renewal_warranty (
    renewal_id  VARCHAR(255) PRIMARY KEY,
    order_id  VARCHAR(255),
    customer_id  VARCHAR(255),
    product_id  VARCHAR(255),
    payments_id  VARCHAR(255),
    service_request_id  VARCHAR(255),
    original_warranty_start DATE,
    original_warranty_end DATE,
    renewal_warranty_start DATE,
    renewal_warranty_end DATE,
    renewal_status renewal_status_enum,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    renewal_fee DECIMAL(10,2)
);


-- ==========================================
--            	       SERVICES
-- ==========================================

-- ==========================================
--               TABLE DEFINITIONS
-- ==========================================

 services.technician (
    technician_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255)
);

 services.service_ticket (
    service_ticket_id VARCHAR(255) PRIMARY KEY,
    ticket_id VARCHAR(255) 
);

 services.service_call (
    service_call_id VARCHAR(255) PRIMARY KEY,
    date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    service_ticket_id VARCHAR(255),
    customer_id VARCHAR(255),
    call_type TEXT NOT NULL CHECK (call_type IN ('Inquiry', 'Request', 'Other')),
    technician_id VARCHAR(255),
    call_status TEXT NOT NULL CHECK (call_status IN ('Open', 'Closed', 'In Progress')),		
    date_closed TIMESTAMP NULL,
    contract_no VARCHAR(255),
    end_date DATE,				
    priority_level TEXT NOT NULL CHECK (priority_level IN ('Low', 'Medium', 'High')),		
    resolution TEXT		
    );

 services.service_request (
    service_request_id VARCHAR(255) PRIMARY KEY,
    service_call_id VARCHAR(255),
    request_date DATE,
    customer_id VARCHAR(255),
    technician_id VARCHAR(255),
    request_type TEXT NOT NULL CHECK (request_type IN ('Repair', 'Installation', 'Maintenance', 'Other')),
    request_status TEXT NOT NULL CHECK (request_status IN ('Pending', 'Approved', 'Rejected', 'In Progress')), -- added In Progress
    request_description TEXT,
    request_remarks TEXT
);

 services.service_analysis (
    analysis_id VARCHAR(255) PRIMARY KEY,
    service_request_id VARCHAR(255),
    analysis_date DATE,
    technician_id VARCHAR(255),
    customer_id VARCHAR(255), 
    analysis_status TEXT NOT NULL CHECK (analysis_status IN ('Scheduled', 'Done')),
    analysis_description TEXT,
    product_id VARCHAR(255),
    contract_id VARCHAR(255),
    labor_cost DECIMAL(10,2) NULL
);

 services.after_analysis_sched (
    analysis_sched_id VARCHAR(255) PRIMARY KEY,
    analysis_id VARCHAR(255),
    service_date DATE NOT NULL,
    technician_id VARCHAR(255),
    description TEXT,
    service_status TEXT NOT NULL CHECK (service_status IN ('Scheduled', 'Completed', 'Cancelled', 'In Progress'))
);

 services.service_order (
    service_order_id VARCHAR(255) PRIMARY KEY,
    analysis_id VARCHAR(255),
    customer_id VARCHAR(255),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 services.service_order_item(
    service_order_item_id VARCHAR(255) PRIMARY KEY, 
    service_order_id VARCHAR(255),
    principal_item_id VARCHAR(255),
    item_name VARCHAR(255),
    item_quantity INT DEFAULT 1 CHECK (item_quantity > 0),
    item_price DECIMAL(10,2) NULL
);

 services.delivery_order (
    delivery_order_id VARCHAR(255) PRIMARY KEY,
    service_order_item_id VARCHAR(255),
    customer_id VARCHAR(255),
    customer_address TEXT,
    delivery_status TEXT NOT NULL CHECK (delivery_status IN ('Pending', 'Shipped', 'Delivered')),
    delivery_date DATE
);

 services.service_billing (
    service_billing_id VARCHAR(255) PRIMARY KEY,
    service_order_item_id VARCHAR(255),
    analysis_id VARCHAR(255),    
    service_request_id VARCHAR(255),
    charge_type TEXT NOT NULL CHECK (charge_type IN ('Labor', 'Parts', 'Other')),
    item_name VARCHAR(255),
    service_billing_amount DECIMAL(10,2) CHECK (service_billing_amount >= 0), -- initial price for item/labor
    outsource_fee DECIMAL(10,2) DEFAULT 0.00 CHECK (outsource_fee >= 0), -- shipping cost
    order_item_price DECIMAL(10,2) DEFAULT 0.00,
    total_payable DECIMAL(10,2) DEFAULT 0.00,
    date_paid DATE NULL
);

 services.service_report (
    report_id VARCHAR(255) PRIMARY KEY,
    service_call_id VARCHAR(255),
    service_ticket_id VARCHAR(255),
    service_billing_id VARCHAR(255),
    technician_id VARCHAR(255),
    description TEXT,
    report_status TEXT NOT NULL CHECK (report_status IN ('Draft', 'Submitted', 'Reviewed')),
    submission_date DATE
);

-- ==========================================
--            	       ADMIN
-- ==========================================

-- ==========================================
--               TABLE DEFINITIONS
-- ==========================================

 admin.roles_permission (
    role_id VARCHAR(255) PRIMARY KEY,
    role_name VARCHAR(255) NOT NULL,
    description TEXT,
    permissions TEXT,
    access_level access_level DEFAULT 'Full Access'
);

 admin.business_partner_master (
    partner_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
	vendor_code VARCHAR(255), 
	customer_id VARCHAR(255), 
    partner_name VARCHAR(255) NOT NULL,
    category partner_category DEFAULT 'Employee',
    contact_info VARCHAR(255)
);

 admin.users (
    user_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255),
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role_id VARCHAR(255),
    status user_status DEFAULT 'Active',
    type user_type DEFAULT 'Employee',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

 admin.audit_log (
    log_id VARCHAR(255) PRIMARY KEY,
    user_id VARCHAR(255),
    action TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT NOW(),
    ip_address VARCHAR(255),
    suspicious_activity BOOLEAN DEFAULT FALSE,
    security_measures TEXT
);

 admin.vendor (
    vendor_code VARCHAR(255) PRIMARY KEY,
    application_reference VARCHAR(255),
    vendor_name VARCHAR(255) NOT NULL,
    contact_person VARCHAR(255),
    status user_status DEFAULT 'Active'
);

 admin.warehouse (
    warehouse_id VARCHAR(255) PRIMARY KEY,
    warehouse_location VARCHAR(255) NOT NULL,
    stored_materials TEXT
);

 admin.item_master_data (
    item_id VARCHAR(255) PRIMARY KEY,
    item_type item_type DEFAULT 'Product'
);

 admin.assets (
    asset_id VARCHAR(255) PRIMARY KEY,
    item_id VARCHAR(255), 
    asset_name VARCHAR(255) NOT NULL,
    purchase_date DATE DEFAULT NOW(),
    serial_no VARCHAR(225)
);

 admin.raw_materials (
    material_id VARCHAR(255) PRIMARY KEY,
    item_id VARCHAR(255),
    material_name VARCHAR(255) NOT NULL,
    description TEXT,
    unit_of_measure unit_of_measure DEFAULT 'kg',
    cost_per_unit DECIMAL
);

 admin.policies (
    policy_id VARCHAR(255) PRIMARY KEY,
    policy_name VARCHAR(255) NOT NULL,
    description TEXT,
    effective_date DATE DEFAULT NOW(),
    status user_status DEFAULT 'Active'
);

 admin.products (
    product_id VARCHAR(255) PRIMARY KEY, 
    item_iD VARCHAR(255) NULL,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    selling_price DECIMAL,
    stock_level INT, 
    warranty_period INT DEFAULT 12,
    policy_id VARCHAR(255)
);


-- ==========================================
--             	 MANAGEMENT
-- ==========================================
-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 management.management_approvals (
    approval_id VARCHAR(255) PRIMARY KEY,
    request_id VARCHAR(255),
    checked_id VARCHAR(255),
    decision_date DATE NOT NULL,
    issue_date DATE NOT NULL,
    checked_by VARCHAR(255),
    checked_date DATE NOT NULL,
    status management_approval_status NOT NULL,
    due_date DATE NOT NULL,
    remarks TEXT	
);

-- ==========================================
--            ACCOUNTING
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 accounting.chart_of_accounts (
  account_code VARCHAR(255) PRIMARY KEY,
  account_name VARCHAR(255) NOT NULL,
  account_type VARCHAR(50) DEFAULT NULL
);

 accounting.currency (
  currency_id VARCHAR(255) PRIMARY KEY,
  currency_name VARCHAR(255) NOT NULL,
  exchange_rate DECIMAL(15,6) NOT NULL,
  is_active BOOLEAN NOT NULL DEFAULT TRUE
);

 accounting.general_ledger_accounts (
  gl_account_id VARCHAR(255) PRIMARY KEY,
  account_name VARCHAR(255) NOT NULL,
  account_code VARCHAR(255) NOT NULL,
  account_id VARCHAR(255),
  status status_enum,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

 accounting.journal_entries (
  journal_id VARCHAR(255) PRIMARY KEY,
  journal_date DATE NOT NULL,
  description VARCHAR(255) DEFAULT NULL,
  total_debit DECIMAL(15,2) NOT NULL,
  total_credit DECIMAL(15,2) NOT NULL,
  invoice_id VARCHAR(255) DEFAULT NULL,
  currency_id VARCHAR(255) NOT NULL
);

 accounting.journal_entry_lines (
  entry_line_id VARCHAR(255) PRIMARY KEY,
  gl_account_id VARCHAR(255) DEFAULT NULL,
  journal_id VARCHAR(255),
  debit_amount DECIMAL(15,2) NOT NULL,
  credit_amount DECIMAL(15,2) NOT NULL,
  description VARCHAR(255) DEFAULT NULL
);

 accounting.official_receipts (
  or_id VARCHAR(255) PRIMARY KEY,
  invoice_id VARCHAR(255) DEFAULT NULL,
  customer_id VARCHAR(255) DEFAULT NULL,
  or_date DATE NOT NULL,
  settled_amount DECIMAL(15,2) NOT NULL,
  remaining_amount DECIMAL(15,2) NOT NULL,
  payment_method VARCHAR(50) NOT NULL,
  reference_number VARCHAR(100),
  created_by VARCHAR(255)
);

-- ==========================================
--            	       FINANCE
-- ==========================================

-- ==========================================
--               TABLE DEFINITIONS
-- ==========================================

 finance.budget_validations (
    validation_id VARCHAR(255) PRIMARY KEY,
    dept_id VARCHAR(255),
    validation_date DATE NOT NULL,
    validated_by VARCHAR(255),
    validation_status VARCHAR(10) CHECK (validation_status IN ('Approved', 'Pending')) NOT NULL,
    remarks VARCHAR(20) CHECK (remarks IN ('Approved', 'Awaiting Validation')) NOT NULL,
    amount_requested DECIMAL(12, 2) NOT NULL,
    final_approved_amount DECIMAL(12, 2)
);

 finance.budget_approvals (
    budget_approvals_id VARCHAR (255),
    validation_id VARCHAR(255),
    downpayments DECIMAL(12, 2),
    approval_status VARCHAR(10) CHECK (approval_status IN ('Approved', 'Pending')) NOT NULL,
    PRIMARY KEY (budget_approvals_id)
);


-- ==========================================
--                OPERATIONS
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 operations.document_header (
  document_id VARCHAR(255) PRIMARY KEY,
  document_type document_type_enum NOT NULL,
  vendor_code VARCHAR(255),
  document_no INT NOT NULL,
  transaction_id VARCHAR(255) NOT NULL,
  module_request module_request_enum NOT NULL,
  status operations_status_enum NOT NULL,
  posting_date DATE NOT NULL,
  delivery_date DATE,
  document_date DATE NOT NULL,
  buyer VARCHAR(255) NOT NULL,
  owner VARCHAR(255) NOT NULL,
  initial_amount DECIMAL(18,2) NOT NULL,
  discount_rate DECIMAL(5,2),
  discount_amount DECIMAL(18,2),
  freight DECIMAL(18,2) NOT NULL,
  tax_rate DECIMAL(5,2) NOT NULL,
  tax_amount DECIMAL(18,2) NOT NULL,
  transaction_cost DECIMAL(18,2) NOT NULL
);


 operations.product_document_items (
  productdocu_id VARCHAR(255) PRIMARY KEY,
  product_id VARCHAR(255),
  quantity_rejected INT NOT NULL DEFAULT 0,
  defect_type VARCHAR(155) NOT NULL,
  selling_price DECIMAL(18,2) NOT NULL,
  manuf_date DATE NOT NULL,
  expiry_date DATE NOT NULL
);

 operations.external_module (
  external_id VARCHAR(255) PRIMARY KEY,
  purchase_id VARCHAR(255),
  request_id VARCHAR(255),
  approval_id VARCHAR(255),
  goods_issue_id VARCHAR(255),
  approval_request_id VARCHAR(255),
  billing_receipt_id VARCHAR(255),
  delivery_receipt_id VARCHAR(255),
  project_resources_id VARCHAR(255),
  project_tracking_id VARCHAR(255),
  project_request_id VARCHAR(255),
  production_order_detail_id VARCHAR(255),
  rework_id VARCHAR(255),
  depreciation_report_id VARCHAR(255)
);

 operations.serial_tracking (
  serial_id VARCHAR(255) PRIMARY KEY,
  document_id VARCHAR(255),
  serial_no VARCHAR(50) NOT NULL UNIQUE
);

 operations.document_items (
  content_id VARCHAR(255) PRIMARY KEY,
  asset_id VARCHAR(255),
  document_id VARCHAR(255),
  material_id VARCHAR(255),
  serial_id VARCHAR(255),
  productdocu_id VARCHAR(255),
  external_id VARCHAR(255),
  quantity INT NOT NULL DEFAULT 0,
  total DECIMAL(18,2) NOT NULL,
  batch_no VARCHAR(100) NOT NULL,
  warehouse_loc VARCHAR(255) NOT NULL
);


-- ==========================================
--            	  PURCHASING
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 purchasing.vendor_application (
    application_reference VARCHAR(255) PRIMARY KEY,
    status vendor_application_status,
    company_name VARCHAR,
    tax_number INT,
    contact_person VARCHAR,
    title VARCHAR,
    vendor_address VARCHAR,
    phone BIGINT,
    fax BIGINT,
    vendor_email VARCHAR,
    tax_exempt BOOLEAN,
    vendor_website VARCHAR,
    organization_type organization_type_enum,
    separate_checks BOOLEAN,
    purchasing_card BOOLEAN,
    account_no BIGINT,
    routing_no INT,
    requestor VARCHAR,
    date_requested DATE
);

 purchasing.purchase_requests (
    request_id VARCHAR(255) PRIMARY KEY,
    employee_id VARCHAR(255) ,
    approval_id VARCHAR(255) ,
    item_id VARCHAR(255) ,
    purchase_item VARCHAR(255),
    purchase_description TEXT,
    purchase_quantity INT,
    valid_date DATE,
    document_date DATE,
    required_date DATE
);

 purchasing.quotation_contents (
    quotation_content_id VARCHAR(255) PRIMARY KEY,
    request_id VARCHAR(255) ,
    unit_price DECIMAL(10,2),
    discount DECIMAL(10,2),
    tax_code VARCHAR(50),
    total DECIMAL(10,2)
);

 purchasing.purchase_quotation (
    quotation_id VARCHAR(255) PRIMARY KEY,
    vendor_code VARCHAR(255) ,
    quotation_content_id VARCHAR(255) ,
    status purchase_status,
    document_no INT,
    valid_date DATE,
    document_date DATE,
    required_date DATE,
    total_before_discount DECIMAL(10,2),
    discount_percent DECIMAL(5,2),
    freight DECIMAL(10,2),
    tax DECIMAL(10,2),
    total_payment DECIMAL(10,2)
);

 purchasing.purchase_order (
    purchase_id VARCHAR(255) PRIMARY KEY,
    quotation_id VARCHAR(255) ,
    order_date DATE,
    delivery_date DATE,
    document_date DATE,
    status purchase_status
);

 purchasing.purchase_invoice (
    invoice_id VARCHAR(255) PRIMARY KEY,
    purchase_id VARCHAR(255) ,
    status purchase_status,
    document_no INT,
    document_date DATE,
    due_date DATE,
    total_credit DECIMAL(10,2),
    credit_balance DECIMAL(10,2),
    dpm_rate DECIMAL(5,2),
    dpm_amount DECIMAL(10,2),
    applied_amount DECIMAL(10,2),
    balance_due DECIMAL(10,2)
);

 purchasing.received_shipments (
    shipment_id VARCHAR(255) PRIMARY KEY,
    purchase_id VARCHAR(255) ,
    delivery_date DATE
);

 purchasing.batch_inspection (
    inspection_id VARCHAR(255) PRIMARY KEY,
    shipment_id VARCHAR(255) ,
    inspection_date DATE,
    employee_id VARCHAR(255) ,
    inspection_result inspection_result,
    remarks VARCHAR(255)
);

 purchasing.credit_memo (
    credit_memo_id VARCHAR(255) PRIMARY KEY,
    inspection_id VARCHAR(255) ,
    status purchase_status,
    document_no INT,
    document_date DATE,
    delivery_date DATE,
    due_date DATE,
    total_credit DECIMAL(10,2),
    credit_balance DECIMAL(10,2),
    dpm_rate DECIMAL(5,2),
    dpm_amount DECIMAL(10,2),
    applied_amount DECIMAL(10,2),
    balance_due DECIMAL(10,2)
);


-- ==========================================
--            	   INVENTORY
-- ==========================================

-- ==========================================
--               TABLE DEFINITIONS
-- ==========================================

 inventory.inventory_item (
	inventory_item_id VARCHAR(255) PRIMARY KEY,
	item_id VARCHAR(255),
	content_id VARCHAR(255),
	expiry_date DATE NOT NULL,
	unit_cost DECIMAL(10, 3) NOT NULL,
	unit_of_measure VARCHAR(25) NOT NULL,
	item_status item_status_enum NOT NULL,
	warehouse_id VARCHAR(255)
);

 inventory.inventory_item_master_data (
	item_md_id VARCHAR(255) PRIMARY KEY,
	item_id VARCHAR(255),
	content_id VARCHAR(255),
	minimum_threshold INT NOT NULL,
	maximum_threshold INT NOT NULL,
	total_stock INT NOT NULL,
	stock_on_order INT NOT NULL,
	stock_committed INT NOT NULL,
	available_stock INT NOT NULL,
	last_update TIMESTAMP NOT NULL
);


 inventory.inventory_cyclic_counts (
	inventory_count_id VARCHAR(255) PRIMARY KEY,
	item_md_id VARCHAR(255),
	item_onhand INT NOT NULL,
	item_actually_counted INT NOT NULL,
	difference_in_qty INT NOT NULL,
	employee_id VARCHAR(255),
	status inventory_status NOT NULL,
	remarks TEXT NOT NULL,
	time_period inventory_time_period NOT NULL
);


 inventory.inventory_adjustments (
	adjustment_id VARCHAR(255) PRIMARY KEY,
	item_id VARCHAR(255),
	adjustment_type adjustment_type_enum NOT NULL,
	quantity INT NOT NULL,
	adjustment_date TIMESTAMP NOT NULL,
	employee_id VARCHAR(255)
);

 inventory.deprecation_report (
	deprecation_report_id VARCHAR(255) PRIMARY KEY,
	item_id VARCHAR(255),
	content_id VARCHAR(255),
	quantity INT NOT NULL,
	reported_date TIMESTAMP NOT NULL,
	status inventory_status_enum NOT NULL,
	warehouse_id VARCHAR(255),
	employee_id VARCHAR(255)
);

 inventory.warehouse_movement (
	movement_id VARCHAR(255) PRIMARY KEY,
	item_id VARCHAR(255),
	movement_type TEXT NOT NULL,
	quantity INT NOT NULL,
	movement_date TIMESTAMP NOT NULL,
	destination VARCHAR(255),
	source VARCHAR(255),
	reference_id_purchase_order VARCHAR(255),
	reference_id_order VARCHAR(255)
);

-- ==========================================
--                DISTRIBUTION
-- ==========================================

-- ==========================================
--            TABLE DEFINITIONS
-- ==========================================

 distribution.carrier (
    carrier_id VARCHAR(255) PRIMARY KEY,
    carrier_name VARCHAR(255) NOT NULL,
    service_type service_type_enum,
    carrier_count INT
);

 distribution.delivery_order (
    del_order_id VARCHAR(255) PRIMARY KEY,
    order_status order_status_type,
    content_id VARCHAR(255),
    is_project_based project_based_type,
    is_partial_delivery yes_no_type,
    service_order_id VARCHAR(255),
    production_request_id VARCHAR(255),
    stock_transfer_id VARCHAR(255),
    sales_order_id VARCHAR(255),  
    approval_request_id VARCHAR(255)
);


 distribution.logistics_approval_request (
    approval_request_id VARCHAR(255) PRIMARY KEY,
    request_date DATE,
    approval_status approval_status_type,
    approval_date DATE,
    approved_by VARCHAR(255),
    del_order_id VARCHAR(255)
);

 distribution.picking_list (
    picking_list_id VARCHAR(255) PRIMARY KEY,
    warehouse_id VARCHAR(255),
    picked_by VARCHAR(255),
    picked_status picked_status_type,
    picked_date DATE,
    approval_request_id VARCHAR(255)
);


 distribution.packing_cost (
    packing_cost_id VARCHAR(255) PRIMARY KEY,
    material_cost DECIMAL(10,2) NOT NULL,
    labor_cost DECIMAL(10,2) NOT NULL,
    total_packing_cost DECIMAL(10,2) NOT NULL
);

 distribution.packing_list (
    packing_list_id VARCHAR(255) PRIMARY KEY,
    packed_by VARCHAR(255),
    packing_status packing_status_type,
    packing_type packing_type_enum,
    total_items_packed INT,
    packing_cost_id VARCHAR(255),
    picking_list_id VARCHAR(255)
);

 distribution.shipping_cost (
    shipping_cost_id VARCHAR(255) PRIMARY KEY,
    packing_list_id VARCHAR(255),
    cost_per_kg DECIMAL(10,2),
    cost_per_km DECIMAL(10,2),
    weight_kg DECIMAL(10,2),
    distance_km DECIMAL(10,2),
    total_shipping_cost DECIMAL(10,2)
);

 distribution.operational_cost (
    operational_cost_id VARCHAR(255) PRIMARY KEY,
    additional_cost DECIMAL(10,2),
    total_operational_cost DECIMAL(10,2),
    shipping_cost_id VARCHAR(255),
    packing_cost_id VARCHAR(255)
);

 distribution.shipment_details (
    shipment_id VARCHAR(255) PRIMARY KEY,
    carrier_id VARCHAR(255),
    shipment_date DATE,
    shipment_status shipment_status_type,
    tracking_number VARCHAR(100) NOT NULL,
    estimated_arrival_date TIMESTAMP,
    actual_arrival_date TIMESTAMP,
    failed_shipment_id VARCHAR(255),
    packing_list_id VARCHAR(255),
    shipping_cost_id VARCHAR(255)
);

 distribution.failed_shipment (
    failed_shipment_id VARCHAR(255) PRIMARY KEY,
    failure_date DATE,
    failure_reason TEXT NOT NULL,
    resolution_status resolution_status_type,
    shipment_id VARCHAR(255)
);


 distribution.delivery_receipt (
    delivery_receipt_id VARCHAR(255)PRIMARY KEY,
    delivery_date DATE,
    received_by VARCHAR(255),
    signature TEXT NOT NULL,
    receipt_status receipt_status_type,
    shipment_id VARCHAR(255)
);


 distribution.rejection (
    rejection_id VARCHAR(255) PRIMARY KEY,
    rejection_status rejection_status_type,
    rejection_reason TEXT NOT NULL,
    rejection_date DATE,
    delivery_receipt_id VARCHAR(255)
);

 distribution.rework_order (
    rework_id VARCHAR(255) PRIMARY KEY,
    assigned_to VARCHAR(255),
    rework_status rework_status_type,
    rework_date DATE,
    expected_completion TIMESTAMP,
    rejection_id VARCHAR(255),
    failed_shipment_id VARCHAR(255)
);

 distribution.billing_receipt (
    billing_receipt_id VARCHAR(255) PRIMARY KEY,
    delivery_receipt_id VARCHAR(255),
    sales_invoice_id VARCHAR(255),
    service_billing_id VARCHAR(255)
);


 distribution.goods_issue (
    goods_issue_id VARCHAR(255) PRIMARY KEY,
    issue_date DATE,
    issued_by VARCHAR(255),
    billing_receipt_id VARCHAR(255)
);
"""